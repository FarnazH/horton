# -*- coding: utf-8 -*-
# Horton is a Density Functional Theory program.
# Copyright (C) 2011-2012 Toon Verstraelen <Toon.Verstraelen@UGent.be>
#
# This file is part of Horton.
#
# Horton is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# Horton is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
#--


import numpy as np

from horton import *

def test_fac2():
    assert fac2(-20) == 1
    assert fac2(0) == 1
    assert fac2(1) == 1
    assert fac2(2) == 2
    assert fac2(3) == 3
    assert fac2(4) == 8
    assert fac2(5) == 15


def test_binom():
    assert binom(1,1) == 1
    assert binom(5,3) == 10
    assert binom(3,2) == 3
    assert binom(10,4) == 210
    assert binom(18,14) == 3060
    assert binom(5, 1) == 5
    assert binom(5, 0) == 1
    assert binom(0, 0) == 1
    assert binom(5, 5) == 1


def test_gpt_coeff():
    def py_gpt_coeff(k, n0, n1, pa, pb):
        result = 0
        for q in xrange(max(-k, k-2*n0), min(k, 2*n1-k)+1, 2):
            i0 = (k+q)/2
            i1 = (k-q)/2
            assert (k+q)%2 == 0
            assert (k-q)%2 == 0
            result += binom(n0, i0)*binom(n1, i1)*pa**(n0-i0)*pb**(n1-i1)
        return result

    pa = 0.8769
    pb = 0.123
    for k in xrange(5):
        check = py_gpt_coeff(k, 2, 2, pa, pb)
        result = gpt_coeff(k, 2, 2, pa, pb)
        assert abs(check - result) < 1e-10

    for k in xrange(7):
        check = py_gpt_coeff(k, 3, 3, pa, pb)
        result = gpt_coeff(k, 3, 3, pa, pb)
        assert abs(check - result) < 1e-10


def test_gb_overlap_int1d():
    assert abs(gb_overlap_int1d(0, 0, 0.0, 0.0, 1/4.0) - 0.886227) < 1e-5
    print gb_overlap_int1d(2, 2, 0.0, 0.0, 1/5.0)
    assert abs(gb_overlap_int1d(2, 2, 0.0, 0.0, 1/5.0) - 0.023780) < 1e-5
    assert abs(gb_overlap_int1d(2, 2, 0.0, 0.0, 1/5.0) - 0.023780) < 1e-5
    assert abs(gb_overlap_int1d(0, 0, 0.0, 0.0, 1/5.0) - 0.792665) < 1e-5
    assert abs(gb_overlap_int1d(2, 2, 0.0, 0.0, 1/1.0) - 1.329340) < 1e-5
    assert abs(gb_overlap_int1d(2, 2, 0.0, 0.0, 1/1.0) - 1.329340) < 1e-5
    assert abs(gb_overlap_int1d(1, 1, 0.0, 0.0, 1/1.0) - 0.886227) < 1e-5
    assert abs(gb_overlap_int1d(2, 2, 0.0, 0.0, 1/2.0) - 0.234996) < 1e-5
    assert abs(gb_overlap_int1d(2, 2, 0.0, 0.0, 1/2.0) - 0.234996) < 1e-5
    assert abs(gb_overlap_int1d(1, 1, 0.0, 0.0, 1/2.0) - 0.313329) < 1e-5
    assert abs(gb_overlap_int1d(2, 2, 0.0, 0.0, 1/3.0) - 0.085277) < 1e-5
    assert abs(gb_overlap_int1d(2, 2, 0.0, 0.0, 1/3.0) - 0.085277) < 1e-5
    assert abs(gb_overlap_int1d(1, 1, 0.0, 0.0, 1/3.0) - 0.170554) < 1e-5
    assert abs(gb_overlap_int1d(2, 2, 0.0, 0.0, 1/4.0) - 0.041542) < 1e-5
    assert abs(gb_overlap_int1d(2, 2, 0.0, 0.0, 1/4.0) - 0.041542) < 1e-5
    assert abs(gb_overlap_int1d(1, 1, 0.0, 0.0, 1/4.0) - 0.110778) < 1e-5
    assert abs(gb_overlap_int1d(2, 2, 0.0, 0.0, 1/5.0) - 0.023780) < 1e-5

    assert abs(gb_overlap_int1d(0, 0, 0.000000, -0.377945, 1/211400.020633) - 0.003855) < 1e-5
    assert abs(gb_overlap_int1d(0, 0, 0.000000, -0.377945, 1/31660.020633) - 0.009961) < 1e-5
    assert abs(gb_overlap_int1d(0, 0, 0.000001, -0.377944, 1/7202.020633) - 0.020886) < 1e-5
    assert abs(gb_overlap_int1d(0, 0, 0.000004, -0.377941, 1/2040.020633) - 0.039243) < 1e-5
    assert abs(gb_overlap_int1d(0, 0, 0.000012, -0.377934, 1/666.420633) - 0.068660) < 1e-5
    assert abs(gb_overlap_int1d(0, 0, 0.000032, -0.377913, 1/242.020633) - 0.113933) < 1e-5
    assert abs(gb_overlap_int1d(0, 0, 0.000082, -0.377864, 1/95.550633) - 0.181325) < 1e-5
    assert abs(gb_overlap_int1d(0, 0, 0.000194, -0.377751, 1/40.250633) - 0.279376) < 1e-5
    assert abs(gb_overlap_int1d(0, 0, 0.000440, -0.377506, 1/17.740633) - 0.420814) < 1e-5
    assert abs(gb_overlap_int1d(0, 0, 0.000972, -0.376974, 1/8.025633) - 0.625656) < 1e-5

    assert abs(gb_overlap_int1d(0, 0, -0.014528, 0.363418, 1/8.325) - 0.614303) < 1e-5
    assert abs(gb_overlap_int1d(0, 3, 0.014528, -0.363418, 1/8.325) - -0.069710) < 1e-5
    assert abs(gb_overlap_int1d(0, 4, -0.014528, 0.363418, 1/8.325) - 0.046600) < 1e-5
    assert abs(gb_overlap_int1d(0, 3, -0.014528, 0.363418, 1/8.325) - 0.069710) < 1e-5
    assert abs(gb_overlap_int1d(0, 1, 0.014528, -0.363418, 1/8.325) - -0.223249) < 1e-5
    assert abs(gb_overlap_int1d(0, 0, -0.101693, 2.543923, 1/8.325) - 0.614303) < 1e-5
    assert abs(gb_overlap_int1d(0, 2, -0.014528, 0.363418, 1/8.325) - 0.118028) < 1e-5
    assert abs(gb_overlap_int1d(0, 1, -0.014528, 0.363418, 1/8.325) - 0.223249) < 1e-5
    assert abs(gb_overlap_int1d(0, 3, 0.014528, -0.363418, 1/8.325) - -0.069710) < 1e-5


def test_overlap_norm():
    max_nbasis = 15
    gb2oi = GB2OverlapIntegral(max_nbasis)
    for shell_type in 0, 1, 2, 3:
        for alpha in np.arange(0.5, 2.51, 0.5):
            scales = np.ones(get_shell_nbasis(shell_type), float)
            r = np.random.uniform(-1, 1, 3)
            gb2oi.reset(shell_type, shell_type, r, r)
            gb2oi.add(1.0, alpha, alpha, scales, scales)
            work = gb2oi.get_work()
            diag = np.diag(work)[:get_shell_nbasis(shell_type)]
            indexes = np.array([shell_type, 0, 0])
            counter = 0
            while True:
                check = diag[counter]*gob_normalization(alpha, indexes)**2
                assert abs(check - 1) < 1e-10
                if not iter_pow1_inc(indexes):
                    break
                counter += 1


def test_gb2_overlap_integral_class():
    max_nbasis = 15
    r0 = np.array([2.645617, 0.377945, -0.188973])
    r1 = np.array([0.000000, 0.000000, 0.188973])

    gb2oi = GB2OverlapIntegral(max_nbasis)
    assert gb2oi.max_nbasis == max_nbasis

    # case 1
    scales0 = np.ones(10, float)
    scales1 = np.ones(15, float)
    gb2oi.reset(3, 4, r0, r1)
    work = gb2oi.get_work()
    assert work.shape == (max_nbasis, max_nbasis)
    assert (work == 0.0).all()
    assert not (work is gb2oi.get_work())
    gb2oi.add(1.0, 5.398, 0.320, scales0, scales1)
    work = gb2oi.get_work()
    #assert abs(work[0, 3] - -0.0135976488493) < 1e-5
    assert abs(work[0, 3] - -0.001256) < 1e-5
    gb2oi.add(0.5, 5.398, 0.320, scales0, scales1)
    work = gb2oi.get_work()
    #assert abs(work[0, 3] - -1.5*0.0135976488493) < 1e-5
    assert abs(work[0, 3] - -1.5*0.001256) < 1e-5

    # case 2
    scales0 = np.ones(6, float)
    scales1 = np.ones(1, float)
    gb2oi.reset(2, 0, r0, r0)
    gb2oi.add(1.0, 0.463, 8.005, scales0, scales1)
    work = gb2oi.get_work()
    #assert abs(work[3,0] - 0.0193575315113) < 1e-5
    assert abs(work[3,0] - 0.013343) < 1e-5
    # 200 110 101 020 011 022


def check_overlap(alphas0, alphas1, r0, r1, scales0, scales1, shell_type0, shell_type1, result0):
    # This test compares output from Horton with reference data computed with
    # PyQuante.
    max_nbasis = 15
    gb2oi = GB2OverlapIntegral(max_nbasis)
    assert gb2oi.max_nbasis == max_nbasis
    # the gaussian basis functions in this test are not normalized:
    nbasis0 = get_shell_nbasis(shell_type0)
    nbasis1 = get_shell_nbasis(shell_type1)
    assert result0.shape == (nbasis0, nbasis1)
    # Clear the working memory
    gb2oi.reset(shell_type0, shell_type1, r0, r1)
    # Add a few cobtributions:
    for alpha0, alpha1 in zip(alphas0, alphas1):
        gb2oi.add(1.0, alpha0, alpha1, scales0, scales1)
    result1 = gb2oi.get_work()[:nbasis0, :nbasis1]
    assert abs(result1 - result0).max() < 1e-8


def test_overlap_0_0():
    check_overlap(
        np.array([ 0.38155,  1.55654,  1.03605]), np.array([ 0.38563,  1.9267 ,  1.20415]),
        np.array([ 0.18522,  0.43272,  0.10418]), np.array([-0.56975, -0.53701,  0.27943]),
        np.array([ 0.57244]),
        np.array([ 1.81523]),
        0, 0,
        np.array([[ 7.37505911]]))


def test_overlap_1_0():
    check_overlap(
        np.array([ 1.3641 ,  0.79165,  0.96826]), np.array([ 1.47887,  1.69581,  1.47239]),
        np.array([ 0.69486, -0.56009, -0.98666]), np.array([ 0.50462, -0.28959, -0.6542 ]),
        np.array([ 1.61394,  1.94395,  0.70231]),
        np.array([ 0.70378]),
        1, 0,
        np.array([[-0.46483016],
                  [ 0.79608132],
                  [ 0.3534869 ]]))


def test_overlap_1_1():
    check_overlap(
        np.array([ 0.35734,  1.59801,  0.65735]), np.array([ 1.51192,  1.57289,  1.5284 ]),
        np.array([-0.24525, -0.26472,  0.23287]), np.array([ 0.88163, -0.36455, -0.23466]),
        np.array([ 1.8095 ,  1.97681,  1.06664]),
        np.array([ 1.36562,  1.29883,  1.52082]),
        1, 1,
        np.array([[ 0.04779076,  0.12575296,  0.68959185],
                  [ 0.14444486,  1.58823333, -0.06673933],
                  [ 0.3650089 , -0.03075454,  0.8424836 ]]))


def test_overlap_2_0():
    check_overlap(
        np.array([ 0.91255,  1.69396,  0.53409]), np.array([ 1.94475,  0.60338,  1.06963]),
        np.array([ 0.97877, -0.22518,  0.41346]), np.array([ 0.55014, -0.68058,  0.67553]),
        np.array([ 1.86953,  0.89686,  0.9576 ,  0.75579,  1.9237 ,  1.69169]),
        np.array([ 1.48799]),
        2, 0,
        np.array([[ 4.00988365],
                  [ 0.39770136],
                  [-0.24436603],
                  [ 1.66169765],
                  [-0.52156028],
                  [ 3.18632383]]))


def test_overlap_2_1():
    check_overlap(
        np.array([ 0.16658,  0.52428,  0.48323]), np.array([ 1.84574,  1.94547,  0.32043]),
        np.array([ 0.15899, -0.44708,  0.27887]), np.array([-0.2667 ,  0.52481, -0.67718]),
        np.array([ 1.48149,  1.7914 ,  0.74833,  1.8111 ,  1.64518,  0.96205]),
        np.array([ 0.55303,  0.98614,  1.20578]),
        2, 1,
        np.array([[-0.45537915, -3.02546143,  3.63902144],
                  [ 1.53581866, -0.80941594, -0.58059756],
                  [-0.63110848, -0.19835644, -0.42140112],
                  [ 1.12966856,  1.36593798,  5.53168681],
                  [-0.24455507, -1.66947439,  2.1151424 ],
                  [ 0.59537584, -2.42384453, -0.89574395]]))


def test_overlap_2_2():
    check_overlap(
        np.array([ 1.8772 ,  0.66306,  1.62698]), np.array([ 1.48297,  0.80119,  1.89849]),
        np.array([ 0.58757, -0.44683,  0.92865]), np.array([-0.53945, -0.60169,  0.20352]),
        np.array([ 0.96814,  1.78969,  1.96564,  1.39243,  1.78382,  1.56938]),
        np.array([ 0.93523,  1.76753,  0.64758,  1.64208,  1.31197,  0.99962]),
        2, 2,
        np.array([[ 0.37405284, -0.0053374 , -0.00915657,  0.68544647,  0.04045487,  0.55501502],
                  [ 0.00958391,  0.01848274,  0.00061483, -0.06141207, -0.28364134,  0.07593485],
                  [ 0.0492885 ,  0.00184313,  0.01045512,  0.47947731, -0.03888278, -0.09362596],
                  [ 0.47923418, -0.07319961,  0.09660233,  1.33667794, -0.03495828,  0.37640877],
                  [ 0.06262875, -0.38087778, -0.01741702, -0.03938322,  0.27117485, -0.01167484],
                  [ 0.78637264,  0.09320441, -0.09051771,  0.76244565, -0.02519833,  0.73705081]]))


def test_overlap_3_0():
    check_overlap(
        np.array([ 0.20951,  0.28247,  1.21724]), np.array([ 1.90283,  0.19887,  1.34656]),
        np.array([ 0.17818, -0.86045,  0.10812]), np.array([-0.25553, -0.10358, -0.61739]),
        np.array([ 0.71955,  0.89878,  1.32627,  0.58463,  1.06506,  1.1792 ,  1.13933,  0.7315 ,  1.63897,  1.07301]),
        np.array([ 1.09825]),
        3, 0,
        np.array([[ -6.84412275],
                  [  5.1732252 ],
                  [ -7.3174884 ],
                  [ -2.15734506],
                  [  0.59561345],
                  [ -4.29554216],
                  [ 19.69066116],
                  [ -4.51540609],
                  [ 10.41893612],
                  [-17.69112812]]))


def test_overlap_3_1():
    check_overlap(
        np.array([ 0.15121,  1.63537,  1.85481]), np.array([ 1.2291 ,  1.5473 ,  0.51975]),
        np.array([-0.05191, -0.84862,  0.44892]), np.array([ 0.12233,  0.5476 ,  0.05299]),
        np.array([ 1.50846,  1.88884,  1.30416,  1.77135,  0.92562,  0.55497,  0.99776,  1.43107,  1.57878,  1.7836 ]),
        np.array([ 1.19057,  0.83325,  0.83198]),
        3, 1,
        np.array([[ 2.10014988, -0.11304073,  0.03200642],
                  [ 0.75386786,  0.22795289,  0.11082966],
                  [-0.1476031 ,  0.07663976,  0.40530456],
                  [ 3.84197477,  0.34663155,  0.05492151],
                  [-0.45461677, -0.01775139,  0.13471654],
                  [ 0.31978933, -0.01740981, -0.04302698],
                  [-0.22607852,  3.31678897,  0.35899451],
                  [ 0.06349521, -0.63634866,  2.08774836],
                  [-0.07076617,  0.24600963, -0.98084179],
                  [ 0.05813693,  0.3260457 ,  2.08322125]]))


def test_overlap_3_2():
    check_overlap(
        np.array([ 1.20011,  0.33878,  1.51811]), np.array([ 0.3459 ,  1.96178,  1.7336 ]),
        np.array([-0.29858, -0.7967 ,  0.39854]), np.array([-0.90944, -0.64625, -0.73663]),
        np.array([ 0.54737,  1.43055,  0.65339,  0.74062,  0.80494,  1.02926,  0.68909,  1.70993,  1.87537,  1.07788]),
        np.array([ 1.06983,  1.0181 ,  1.308  ,  0.59744,  0.97754,  1.73034]),
        3, 2,
        np.array([[ 0.04997506, -0.03609568,  0.34989787, -0.06339275,  0.0155446 , -0.38756342],
                  [ 0.06280297,  0.0060115 , -0.00013651, -0.02756347,  0.27915505,  0.10056387],
                  [-0.21643043, -0.00004853,  0.00398969, -0.06289051, -0.00458798,  0.11069749],
                  [ 0.09594925,  0.00073215,  0.13957776, -0.06967677, -0.00094373, -0.15983133],
                  [ 0.00495924, -0.06123233,  0.00272798,  0.00217767, -0.0095553 ,  0.01249752],
                  [ 0.08633778, -0.02767254,  0.0644089 , -0.10327526,  0.00316029, -0.38169709],
                  [ 0.03991552,  0.20348681,  0.02507555, -0.01121691,  0.3630777 ,  0.10835293],
                  [-0.25403295, -0.00226927,  0.06159929, -0.29894421, -0.0012535 ,  0.39095044],
                  [ 0.09695665,  0.25868317,  0.00770482, -0.02943601,  0.10966853,  0.17128969],
                  [-0.73142258,  0.03540743,  0.23754038, -0.32921368, -0.04372348, -0.01565985]]))


def test_overlap_3_3():
    check_overlap(
        np.array([ 0.61505,  1.89932,  0.88091]), np.array([ 1.73721,  0.84781,  0.2702 ]),
        np.array([ 0.13589, -0.64805, -0.00985]), np.array([-0.87779, -0.3078 ,  0.4045 ]),
        np.array([ 0.87562,  0.94676,  1.00714,  1.64365,  0.50092,  1.70516,  1.04766,  0.92249,  0.70682,  0.5254 ]),
        np.array([ 0.97169,  1.39497,  1.30833,  0.76837,  1.11379,  1.57636,  1.54807,  0.73938,  0.69   ,  1.18188]),
        3, 3,
        np.array([[ 4.15859105, -0.40861149, -0.46669399,  0.48447216,  0.11002233,  1.0556848 ,  0.61893723,  0.13137188,  0.1069884 ,  0.58861062],
                  [ 0.23832739,  1.10191452, -0.06694614, -0.08428443, -0.08285553,  0.03197369,  1.69516343,  0.07072293,  0.26634209, -0.08342378],
                  [ 0.30874014, -0.07593169,  1.07114098,  0.01867899, -0.07057921, -0.22090277, -0.11375454,  0.27791106,  0.06910082,  1.4302854 ],
                  [ 2.45406222, -0.16904268, -0.4388101 ,  0.60911125,  0.02232811,  0.52328746,  0.69429659,  0.19405029,  0.00957155,  0.34738557],
                  [ 0.0147559 ,  0.03819706,  0.02877506, -0.00588988,  0.07985295, -0.01191429, -0.05963298,  0.02256946,  0.02584141, -0.03809331],
                  [ 2.56582207, -0.4009092 , -0.20296195,  0.25032315,  0.02357056,  1.29331229,  0.38446027,  0.01251804,  0.15373757,  0.66630371],
                  [ 0.59350333,  2.95315879, -0.17682239, -0.32601776, -0.5561459 ,  0.27100409,  7.24017008,  0.12823454,  0.75868102, -0.21839837],
                  [ 0.21620374, -0.01288184,  0.79126583,  0.1131799 , -0.04714846, -0.38743476, -0.15928094,  0.55088509,  0.0233582 ,  1.12461804],
                  [ 0.13788668,  0.66969011, -0.00975483, -0.12147174, -0.04603221,  0.14558949,  1.09409377,  0.01973007,  0.40312736, -0.09270714],
                  [ 0.36414052, -0.09494291,  1.36719578,  0.076182  , -0.22519195, -0.40464075, -0.14088458,  0.37745611,  0.05945119,  2.79182182]]))


def test_overlap_4_0():
    check_overlap(
        np.array([ 1.33264,  1.93806,  1.93727]), np.array([ 1.95318,  0.55839,  0.92698]),
        np.array([ 0.29297, -0.59716,  0.32057]), np.array([ 0.62773,  0.09809, -0.56828]),
        np.array([ 1.74264,  1.93814,  0.5884 ,  0.78401,  1.5155 ,  0.85113,  0.60545,  0.60674,  1.12304,  1.02276,  1.27453,  1.2872 ,  1.51933,  1.10252,  1.68958]),
        np.array([ 1.1598]),
        4, 0,
        np.array([[ 0.36764944],
                  [ 0.05504003],
                  [-0.02136258],
                  [ 0.06849119],
                  [-0.04183808],
                  [ 0.08601565],
                  [ 0.01999582],
                  [-0.01165504],
                  [ 0.02116684],
                  [-0.04818207],
                  [ 0.39378848],
                  [-0.11287608],
                  [ 0.19922923],
                  [-0.10787124],
                  [ 0.6775918 ]]))


def test_overlap_4_1():
    check_overlap(
        np.array([ 1.76653,  0.22375,  0.12324]), np.array([ 1.85803,  1.4349 ,  0.93092]),
        np.array([ 0.59731, -0.13831, -0.78078]), np.array([-0.48602, -0.93713, -0.80125]),
        np.array([ 1.22477,  1.9374 ,  1.4286 ,  1.43287,  1.80204,  1.16563,  1.09655,  0.92286,  0.99676,  1.19032,  1.90032,  1.7857 ,  0.85302,  0.77905,  0.64177]),
        np.array([ 0.64838,  1.68203,  1.74876]),
        4, 1,
        np.array([[-14.8625165 ,   4.46965981,   0.11908028],
                  [ -7.6491756 , -14.83952385,   0.07473575],
                  [ -0.14453562,   0.05300578, -13.52562103],
                  [ -3.3080767 ,  -9.91756325,   0.04641387],
                  [ -0.05627861,  -0.15768523,  -7.6219426 ],
                  [ -1.27143428,   0.65549744,  -0.23523715],
                  [ -1.63774007, -11.27900516,   0.0342184 ],
                  [ -0.01812762,  -0.08131027,  -3.66390153],
                  [ -0.3625845 ,  -1.51048321,  -0.10005337],
                  [ -0.03327069,   0.02567911,  -6.66779844],
                  [  2.01530868, -37.6707845 ,   0.10270681],
                  [  0.02066042,  -0.34706269, -10.14125911],
                  [  0.17329651,  -1.92805616,  -0.11916524],
                  [  0.00647855,  -0.06688925,  -3.21789763],
                  [  0.18290074,   0.34987084,  -0.26228858]]))


def test_overlap_4_2():
    check_overlap(
        np.array([ 1.81625,  0.42484,  1.78998]), np.array([ 0.87881,  1.6645 ,  0.62636]),
        np.array([-0.09577,  0.43432,  0.30419]), np.array([-0.39053, -0.41847,  0.0288 ]),
        np.array([ 1.3704 ,  0.72173,  0.68438,  0.94581,  0.91228,  1.87348,  0.52649,  0.65946,  0.61436,  1.88314,  0.64125,  1.91603,  1.94277,  1.61052,  1.59068]),
        np.array([ 1.85355,  0.65632,  1.9032 ,  1.96359,  1.10161,  1.86939]),
        4, 2,
        np.array([[ 1.32805811, -0.04613372, -0.04320096,  0.58551373,  0.04457861,  0.34759665],
                  [ 0.11276588,  0.02042907, -0.02682566,  0.02262235, -0.00200546,  0.06185421],
                  [ 0.03453078, -0.00877211,  0.12673123,  0.02491492, -0.01460948,  0.00181613],
                  [ 0.37844919,  0.01703868, -0.00756702,  0.21371166, -0.00032273,  0.15894243],
                  [ 0.06573236,  0.00201802,  0.03335586,  0.01076307,  0.01448151,  0.00366559],
                  [ 0.37521478, -0.0052174 ,  0.0417082 ,  0.266232  , -0.00860362,  0.3851452 ],
                  [ 0.01354328,  0.04480448, -0.02351642,  0.08535673, -0.00471426,  0.06669629],
                  [ 0.00460124,  0.00530731,  0.07977768,  0.01892326,  0.00960536,  0.00459219],
                  [ 0.00251714,  0.00564864,  0.02093618,  0.00750272,  0.00229216,  0.04777277],
                  [ 0.00499544, -0.02203157,  0.34241384,  0.06804191, -0.04310194,  0.09592031],
                  [ 0.50827674, -0.02143765,  0.02259588,  1.02481778, -0.03361778,  0.50960077],
                  [ 0.22567413, -0.01022147, -0.09250465,  0.29022148,  0.27601592,  0.04561346],
                  [ 0.31981046, -0.00029871, -0.01568837,  0.4313964 ,  0.05507843,  0.78424487],
                  [ 0.12735302, -0.00264882, -0.06368496,  0.04653848,  0.07559615,  0.23733819],
                  [ 0.39226618,  0.03258814, -0.05009992,  0.66393196, -0.08389847,  1.5393678 ]]))


def test_overlap_4_3():
    check_overlap(
        np.array([ 0.36707,  0.71034,  0.35369]), np.array([ 1.52363,  1.55468,  0.2221 ]),
        np.array([-0.93555,  0.50321, -0.46688]), np.array([ 0.62248,  0.98146,  0.5302 ]),
        np.array([ 0.86788,  1.64811,  0.69014,  1.94977,  1.56664,  0.64777,  1.84159,  1.27696,  1.02837,  0.86408,  1.381  ,  1.71595,  1.03498,  1.98586,  1.04105]),
        np.array([ 0.95256,  1.06661,  1.8854 ,  1.77207,  1.23133,  0.60978,  0.89928,  0.77363,  1.8449 ,  1.90911]),
        4, 3,
        np.array([[ -23.35054619,  -14.64710204,  -53.97896897,   24.40319684,    3.15490521,   10.90521115,  -20.7156497 ,  -13.17357764,  -19.59728824, -101.45798541],
                  [  16.46167958,   -2.33042958,    0.48218883,  -11.247298  ,  -11.7691257 ,    2.71959188,   48.61433368,    3.56956768,   43.04797077,  -15.18179023],
                  [  14.37143634,    0.1142274 ,   -1.40086936,    5.31377017,   -1.835243  ,   -2.8330638 ,   -2.70950356,    4.48851543,    2.97968989,   46.51000352],
                  [ -37.43418335,    1.63051563,  -26.93045037,   -7.73052765,    0.08158491,   -1.36935888,  -18.53947922,  -19.3001896 ,    2.63693345,  -58.83127508],
                  [  -2.34551703,    7.00884266,    4.5874329 ,    0.37583369,   -1.02014207,    0.10896179,   12.41212122,   -2.43030574,  -12.98139482,   13.52097277],
                  [ -13.99347083,   -2.74474081,    0.82822427,   -1.13526391,    0.01010153,   -0.78990337,   -4.52615655,    0.25690086,   -6.57786251,  -24.86036948],
                  [  17.30703576,  -19.66444697,    4.65805441,   -0.68608558,   -6.94224197,    1.52608824,   74.09284612,    0.2698057 ,   43.75198404,  -14.7933046 ],
                  [   8.54902249,   -0.08772057,   -6.25776106,    4.2614252 ,    0.1224609 ,   -0.93972887,   -2.22444903,    6.36918665,   -0.29969637,   26.09690375],
                  [   3.70778095,   -4.08870657,   -0.03135636,   -1.41442273,    0.09893209,    0.50598813,   10.41081975,   -0.04587527,   14.15889481,   -3.4831098 ],
                  [  17.640422  ,    1.28087764,  -14.68186   ,    3.45051844,   -1.41201897,   -0.24804164,   -3.10743482,    6.03176982,    0.33992194,   67.25730374],
                  [ -83.96861477,   19.99273697,  -53.88334134, -172.65772694,    7.5577065 ,  -18.9823001 ,  -12.94719451,  -48.23837147,   24.1335551 ,  -91.17059692],
                  [  -8.11565395,   21.6191248 ,   13.80912443,    0.57585134,  -21.89784237,    2.19626236,   44.18167207,   -0.51103685,  -31.5871051 ,   31.45204663],
                  [ -23.69834124,    0.90945428,    1.16638359,  -30.24182003,   -0.03673576,   -8.26571321,   -8.17772371,    0.64930327,    1.66131007,  -29.37678972],
                  [  -9.86645423,   25.41633554,   19.30186526,    9.17270375,  -29.57497867,    0.25821069,   34.61936665,   -7.91484336,   -4.0299597 ,   47.44749525],
                  [ -79.50480614,  -13.8365909 ,   49.56559163,  -40.12379873,    5.07719789,  -40.08498025,  -17.62392674,   10.92515487,  -37.22721022,  -40.4914588 ]]))


def test_overlap_4_4():
    check_overlap(
        np.array([ 1.49743,  0.28887,  1.30672]), np.array([ 1.5195 ,  0.12034,  1.33652]),
        np.array([-0.76864,  0.21477, -0.87085]), np.array([ 0.30839, -0.47598, -0.31725]),
        np.array([ 1.3229 ,  1.25303,  1.00305,  1.48236,  1.84543,  1.90289,  0.8467 ,  1.11986,  1.73924,  0.53723,  0.87138,  1.44704,  1.64225,  1.97351,  1.37167]),
        np.array([ 1.90328,  1.52245,  1.36394,  1.0657 ,  0.85058,  0.70004,  0.70973,  1.64782,  1.61763,  1.54071,  0.56068,  1.86628,  1.4608 ,  1.38572,  0.56277]),
        4, 4,
        np.array([[ 10860.93874874,   -452.32599228,    324.77228431,    899.09223991,    -93.68752283,    556.18615513,     59.87469175,    -41.66304979,     48.0582979 ,   -101.90066974,    438.82233443,   -173.07090079,    365.36199859,   -125.70452051,    394.38259926],
                  [   475.2771819 ,   1035.09439807,     65.56562056,    -51.42318671,     20.11984948,     10.53552285,    313.64297985,    -51.31692065,    222.27364818,     41.57845445,    121.32573759,    -97.59579562,     48.44847787,    -62.58436268,    -17.3352106 ],
                  [  -304.91814246,     58.58481486,    765.74752471,    -10.92616379,    -20.72984408,     22.08926511,     15.67361047,    198.5377844 ,    -41.10492632,    526.58416418,     12.37591298,     88.78432215,    -33.64414605,     69.93075464,    -77.45449685],
                  [  2199.59949491,    -33.5476083 ,    124.14423181,    518.58703461,     -4.44827034,    136.11229179,    -20.17647609,     17.30106581,     -1.64238931,     17.95648562,    600.53073365,   -118.54871265,    308.43629497,     -8.7327609 ,    141.26801918],
                  [   -71.70703077,    -63.88214282,     73.66368941,     21.65014537,    154.20905777,     14.49632897,     -4.41512691,    -13.14804504,     10.22154124,     11.55457128,     32.24873739,    472.15886478,    -42.07293154,    328.34912518,     32.09031457],
                  [  2790.60394171,   -219.35762785,     29.05788034,    279.14867697,     -5.36600661,    441.86367078,    -13.38540454,      1.71720346,    -27.48837382,     45.52045725,    199.41748731,    -14.50149471,    424.83281568,   -114.14422254,    747.43305291],
                  [   282.36623922,    552.58118862,     34.17329897,    -33.46378077,     27.86578869,     14.2478907 ,    288.39135652,    -15.40385753,    141.99723498,     25.93005542,     97.44726363,    -95.68804905,     15.50381178,    -42.63710347,    -11.52847906],
                  [  -101.99288532,      3.33568027,    224.70852502,    -19.60892488,     -3.06253165,     16.81702703,     10.52690609,    164.32555779,     -2.80099854,    184.91666273,     17.69689654,     63.58385024,    -29.69265992,      5.07943112,    -29.00478529],
                  [   195.33619167,    373.22132967,      4.36166091,    -48.10367836,      3.47286376,     25.22196873,    135.33126588,     -4.08568295,    245.4130332 ,     35.8525322 ,     55.82388002,     -8.2817618 ,     57.04013653,    -57.54634631,    -33.2509476 ],
                  [  -143.01608249,     24.106398  ,    319.86768096,    -11.66557203,    -22.4655688 ,     11.28594366,      7.71688018,     99.24362198,     -9.68722427,    398.45761849,      6.49725333,     47.32706642,     -8.452195  ,     56.42345531,    -50.11075747],
                  [  1294.93125402,    104.07861972,    129.28774282,    784.41910294,     12.67812788,    130.19664906,   -145.83644757,    200.22393936,     35.81998833,    131.40252247,   2082.44694422,   -197.11423855,    821.14664281,     43.81010174,    237.82033605],
                  [   -55.1610876 ,    -88.97845702,    100.17157688,     13.00930011,    197.27217335,     18.10664837,    -62.19064165,    -60.46253073,    100.04826349,    110.40604806,     85.60298441,   1530.13398283,    -44.50790212,    739.31491352,     70.53772374],
                  [   804.56395952,    -21.70147325,     14.81385235,    308.19358507,     -0.48807095,    206.9843575 ,    -91.74326344,     14.51240206,    -19.11372082,    163.14773703,    628.15471113,    -22.87790567,    825.53145046,    -18.25969718,    616.23858118],
                  [   -74.92617811,   -117.99902178,    138.13925207,     36.73285767,    265.5961531 ,     11.7668321 ,    -57.30764656,   -173.26469261,     63.49957629,    230.45395691,     96.29166324,   1431.32187793,    -60.12636755,   1506.73280576,    118.06009694],
                  [  1991.81957825,   -276.96615132,   -121.00405373,    323.73524702,     20.52904741,    825.80781981,   -118.7596791 ,    -50.28343635,   -393.05518418,    404.29891122,    407.02620486,     97.66902465,   1397.44765615,   -233.21165378,   3279.21648727]]))
