#!/usr/bin/env python

import importlib

def discover():
    from glob import glob
    # find packages
    packages = {'horton': []}
    for fn in glob('../horton/*/__init__.py'):
        subpackage = fn.split('/')[2]
        if subpackage == 'test':
            continue
        packages['horton.%s' % subpackage] = []
    # find modules
    for package, modules in packages.iteritems():
        stub = package.replace('.', '/')
        for fn in glob('../%s/*.py' % stub) + glob('../%s/*.so' % stub):
            module = fn.split('/')[-1][:-3]
            if module == '__init__':
                continue
            modules.append(module)

    return packages


def get_first_docline(module):
    m = importlib.import_module(module)
    if m.__doc__ is not None:
        lines = m.__doc__.split('\n')
        if len(lines) > 0:
            return lines[0]
    return 'FIXME! Write module docstring.'


def underline(line, char, f):
    print >> f, line
    print >> f, char*len(line)
    print >> f


def main():
    packages = discover()
    for package, modules in sorted(packages.iteritems()):
        with open('lib/%s.rst' % package.replace('.', '_'), 'w') as f:
            print >> f, '..'
            print >> f, '    This file is automatically generated. Do not make '
            print >> f, '    changes as these will be overwritten. Rather edit '
            print >> f, '    the docstrings in the source code.'
            print >> f
            underline('``%s`` -- %s' % (package, get_first_docline(package)), '#', f)
            print >> f

            for module in sorted(modules):
                full = package + '.' + module
                underline('``%s`` -- %s' % (full, get_first_docline(full)), '=', f)
                print >> f, '.. automodule::', full
                print >> f, '    :members:'
                print >> f
                print >> f


if __name__ == '__main__':
    main()
