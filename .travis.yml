sudo: false
language: python

python:
 - "2.7"

addons:
  apt:
    packages:
     - gcc
     - g++
     - gfortran
     - libatlas-base-dev
     - libhdf5-serial-dev
     # libtool is needed by libint
     - libtool
     - doxygen
     - cppcheck

env:
  global:
     - QAWORKDIR=$HOME/qaworkdir
     - CACHED=$QAWORKDIR/cached
     - PIP_WHEEL_DIR=$CACHED/wheels
     - PIP_FIND_LINKS=file://$CACHED/wheels
     - PIP_NO_CACHE_DIR=1

cache:
  directories:
    - $HOME/qaworkdir/cached

install:
# Install all required python packages for HORTON and for testing with pip.
 - tools/qa/install_deps_pip.sh

# Get the master branch for a comparative analysis, if not already present.
 - ((git rev-parse --verify master &> /dev/null) || (git config remote.origin.fetch refs/heads/*:refs/remotes/origin/*; git fetch origin master --depth=50; git branch master origin/master))

# Handle detached-HEAD situations that seem to be common on Travis-CI.
 - tools/qa/fix_detached_head.sh

# BLAS_LIBRARIES must be set because Python thinks it is running in Debian
# wheezy/sid while it is actually running Ubuntu-12.04. This is Travis-CI specific.
 - export BLAS_LIBRARIES=atlas:cblas

# Build all required dependencies from source, i.e. the ones not provided by the build
# infrastructure. These dependencies are built from source for two reasons:
# 1) Travis limits the packages that can be installed in the container-based
#    build bots.
# 2) For these dependencies, we want to have a good control over which version is used,
#    such that we can better guarantee HORTON to work with specific versions of
#    dependencies.

# The following script acts differently, depending on what the current branch is:
# 1) If the current branch is the master branch, only the dependencies of the HEAD of the
#    master branch are built.
# 2) If the current branch is a feature branch (or a pull request), the dependencies of
#    the master branch and the feature branch are built. (If they share common
#    dependencies, these are only built once.) In the end, this script makes sure it
#    checks out the feature branch again.
 - tools/qa/install_deps_extra_twobranches.sh

script:
# Run all checks. This script also acts differently, depending on the current branch:
# 1) If the current branch is the master branch, only the non-comparative tests are
#    executed: building HORTON, building documentations, fast unit tests, slow unit tests
#    and some code analysis tools.
# 2) If the current branch is a feauture branch (or a pull request), it first runs all
#    checks on the feature branch: building HORTON, building documentation, fast unit
#    tests + coverage, slow unit tests, all code analysis tools. Then it checks out the
#    master branch and runs the following tests; building HORTON, fast unit tests +
#    coverage, all code analysis tools whose output needs to compared to the results from
#    the feature branch (the trapdoor tests). Finally, it compares the outputs of both
#    branches to check for regressions.
 - tools/qa/test_all_twobranches.sh
